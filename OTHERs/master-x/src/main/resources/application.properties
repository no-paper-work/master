spring.application.name=master
spring.profiles.active=default
# spring.config.import=optional:configserver:http://localhost:8888/configurations/

profile.msg = Master Details for all MicroService
profile.build-version=v1

server.port=8091
server.servlet.context-path=/
## COMMON API PARAM
v1API=/api/v1
      
## EUREKA
eureka.instance.prefer-ip-address = true 
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/service-registry/eureka/

# Configuring Info End Point
management.info.env.enabled = true
info.app.name = master
info.app.description = Master Data - MicroService
info.app.version = 1.0.0

server.error.include-message= always
server.error.include-binding-errors= always
# server.error.include-stacktrace= on_trace_param
## server.error.include-stacktrace= never ## PRODUCTION
server.error.include-exception= false
item.absent=Item with id {0} not found

spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

## Error
# logging.level.org.springframework=ERROR

## TOGGLE FOR ENABLING REDIS - (When set to false, Spring Boot will not automatically scan for and create 
## implementations for interfaces extending RedisRepository or other Spring Data Redis repository marker interfaces.)
spring.data.redis.repositories.enabled=true

# Redis Configuration for Rate Limiter and Cache)
spring.data.redis.host=redis-13492.c264.ap-south-1-1.ec2.redns.redis-cloud.com
spring.data.redis.port=13492
# 6379

## --- Caching Configuration ---
## Set the cache type to redis to enable distributed caching.
spring.cache.type=redis
# spring.cache.redis.cache-null-values=true
# spring.cache.redis.time-to-live = 30S

# Optional: Set a password if your Redis server requires authentication
spring.data.redis.username=default
spring.data.redis.password=9QGCGzgytadc5cGC1pzNhZVyT0af29ec

# Optional: Configure Redis database index (default is 0)
spring.data.redis.database=0


# ## OBSERVABILITY USING ACTUATOR

# Actuator for monitoring
management.endpoints.web.base-path=/details
management.endpoints.web.exposure.include=gateway,health,info,metrics,refresh
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.redis.enabled=true
# management.endpoints.shutdown.enabled=true
# management.endpoint.web.exposure.include = *
# management.endpoint.shutdown.access=true
management.info.git.mode=full


# R2DBC Database Configuration
spring.r2dbc.url=r2dbc:postgresql://ep-bold-bar-a1l33ibu-pooler.ap-southeast-1.aws.neon.tech/metis?sslmode=require
spring.r2dbc.username=metis_owner
spring.r2dbc.password=npg_Jb1MVzHtu8Oj
spring.r2dbc.pool.enabled=true	

# ## JPA PostgreSQL
spring.sql.host=ep-long-tooth-a1awtc33-pooler.ap-southeast-1.aws.neon.tech
spring.sql.database=metis
spring.sql.port=5432

spring.jpa.database=POSTGRESQL
spring.sql.init.platform=postgres
spring.datasource.url=jdbc:postgresql://ep-long-tooth-a1awtc33-pooler.ap-southeast-1.aws.neon.tech/metis?sslmode=require&channelBinding=require
# jdbc:postgresql://ep-bold-bar-a1l33ibu-pooler.ap-southeast-1.aws.neon.tech/metis?sslmode=require
# postgresql://${spring.sql.host}:${spring.sql.port}/${spring.sql.database}/metis?sslmode=require

spring.datasource.username=metis_owner
spring.datasource.password=npg_Jb1MVzHtu8Oj

spring.encryption.aes.secret-key=c5NpjQeCgoTyZsSnVd6GWE2bh5BjORLJ
spring.encryption.aes.vector=3732005182054381
spring.encryption.aes.algo=AES/CBC/PKCS5PADDING
spring.encryption.aes.type=AES
encrypt.key=bW5hgtVbbGhBRMjc27PJWFm2FyJNxtmM

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.format_sql=true

# Hibernate ddl auto (create, create-drop, validate, update)
## create OR create-drop options. drop table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.default_schema=npw

## To generate the database schema, we'll need to pass the schema generation properties to the persistence provider in use.
## To do this, we'll set the native JPA properties in our configuration file under the spring.jpa.properties prefix
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=${spring.application.name}-create.sql
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata

## default connection pool
spring.datasource.hikari.connectionTimeout=200000
spring.datasource.hikari.maximumPoolSize=50


# Configure the Heap Size When Starting a Spring Boot Application
JAVA_OPTS="-Xms512m -Xmx1024m"
